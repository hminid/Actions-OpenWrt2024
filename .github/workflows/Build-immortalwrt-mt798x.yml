#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build immortalwrt-mt798x

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh_enable:
        type: boolean
        description: 'SSH connection to Actions'
        required: false
        default: false
      build_firmware:
        type: boolean
        description: 'build_firmware'
        required: false
        default: true
      openwrt_build_depends:
        description: 'openwrt_build_depends'
        required: false
        default:  "sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
                  bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
                  git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
                  libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
                  libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
                  python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
                  uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev clang file nano aria2"
      openwrt_repo_url:
        description: 'openwrt_repo_url'
        required: false
        default: 'https://github.com/openwrt/openwrt'
      openwrt_repo_branch:
        description: 'openwrt_repo_branch'
        required: false
        default: 'main'
      openwrt_config_file:
        description: 'openwrt_config_file'
        required: false
        default: 'Abuild.config'
        
env:
  SSH_ENABLE: ${{inputs.ssh_enable}}
  BUILD_FIRMWARE: ${{inputs.build_firmware}}
  REPO_URL: ${{inputs.openwrt_repo_url}}
  REPO_BRANCH: ${{inputs.openwrt_repo_branch}}
  CONFIG_FILE: ${{inputs.openwrt_config_file}}
  BUILD_DEPENDS: ${{inputs.openwrt_build_depends}}
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  WORK_DIR: /mnt/workdir
  UPLOAD_DIY_DIR: diydir
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        df -h
        # sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p $WORK_DIR
        sudo chown $USER:$GROUPS $WORK_DIR
        sudo mkdir -p $WORK_DIR/$UPLOAD_DIY_DIR
        sudo chown $USER:$GROUPS $WORK_DIR/$UPLOAD_DIY_DIR
        ln -sf $WORK_DIR/$UPLOAD_DIY_DIR $GITHUB_WORKSPACE/$UPLOAD_DIY_DIR
        
    - name:  apt update
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
         sudo apt update -y
         sudo apt full-upgrade -y
         
    - name:  Install TTYD dependencies and run commands
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.ssh_enable }}
      run: |        
        wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo apt install ./cloudflared-linux-amd64.deb
        wget -O ttyd https://github.com/tsl0922/ttyd/releases/download/1.7.4/ttyd.x86_64
        chmod 777 ttyd
        ./ttyd -c admin:admin -p 8391 -a -W bash &
        cloudflared tunnel --url http://localhost:8391 > mylog.txt 2>&1 &
        sleep 5     

    - name:  show TTYD message
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.ssh_enable }}
      run: | 
        echo "User:Password  admim:admin"
        echo "If you want to continue a workflow,"
        echo "just create an empty file with the name continue in the project directory by running touch continue"
        cat mylog.txt
        # while [ ! -f ./continue ]; do sleep 5; cat mylog.txt; done   
        
    - name:  apt install dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
          # sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
          df -h
          $BUILD_DEPENDS
  
    - name: Clone source code
      working-directory: ${{ env.WORK_DIR }}
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf $WORK_DIR/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        df -h
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        df -h
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
       
     # - name: SSH connection to Actions EXIT_RUN sudo touch continue
     #   uses: P3TERX/ssh2actions@v1.0.0
     #   if: ${{ github.event_name == 'workflow_dispatch' && inputs.ssh_enable }}
      
    - name: TTYD connection to Actions EXIT_RUN sudo touch continue
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.ssh_enable }}
      run: |
           df -h
           while [ ! -f ./continue ]; do sleep 5; cat mylog.txt; done
  
    - name: copy files to UPLOAD_DIY_DIR 
      run: |
        [ -e openwrt/.config ] && cp openwrt/.config $UPLOAD_DIY_DIR/Abuild.config
        ls -la $UPLOAD_DIY_DIR
        df -h
        
    - name: Upload UPLOAD_DIY_DIR directory
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.UPLOAD_DIY_DIR }}_config_files
        path: ${{ env.UPLOAD_DIY_DIR }}
        
    - name: Download package
      id: package
      if: env.BUILD_FIRMWARE == 'true'
      run: |
        df -h
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;


    - name: Compile the firmware
      id: compile
      if: env.BUILD_FIRMWARE == 'true'
      run: |
        df -h
        cd openwrt
        echo -e "$(nproc) thread compile"
        # make -j$(nproc) || make -j1 || make -j1 V=s
        make -j$(nproc)
        
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check space usage
      if: (!cancelled())
      run: df -h

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
